library("mgcViz")
library("lubridate")
library("gridExtra")
library("ggformula")
theme_set(theme_minimal())
data <- readRDS(file = "Daten/data.RDS")
date_data <- readRDS(file = "Daten/date_data.RDS")
min_data <- readRDS(file = "Daten/min_data.RDS")
date_data_noNA <- date_data[!is.na(date_data$count_people),]
data_noNA <- data[!is.na(data$lvs),]
min_data_noNA <- min_data[!is.na(min_data$count_people_min),]
source("date_model.R", encoding = "UTF-8")
source("day_model.R", encoding = "UTF-8")
source("smooth_plots_date_model.R", encoding = "UTF-8")
source("smooth_plots_day_model.R", encoding = "UTF-8")
date_model <- date_model_function(date_data)
date_model$summary # Übersicht (mit Signifikanz)
print(plot(date_model$Viz, trans = plogis) +
ylim(0,1), pages = 1) # non-parametrische Plots
plogis(date_model$summary$p.coeff) # parametrische Effekte
summary(date_data$holiday)
plot(date_data$holiday, date_data$ratio)
date_model$summary # Übersicht (mit Signifikanz)
date_model
theme_set(theme_minimal())
set.seed(42)
source("data_general.R", encoding = "UTF-8")
source("data_group.R", encoding = "UTF-8")
source("data_night.R", encoding = "UTF-8")
source("data_temp.R", encoding = "UTF-8")
source("get_legend.R", encoding = "UTF-8")
source("scenarios_plots_date_model.R", encoding = "UTF-8")
source("scenarios_plots_day_model.R", encoding = "UTF-8")
date_model_general <- date_model_function(date_data_general)
date_model_general$summary # Übersicht (mit Signifikanz)
plogis(date_model_general$summary$p.coeff) # parametrische Effekt
grid.arrange(plots_scenarios_date_model_comparison_grid)
install.packages("gtools")
library("tidyverse")
library("patchwork")
library("GGally")
library("mgcv")
library("mgcViz")
library("lubridate")
library("gridExtra")
library("ggformula")
library("gtools")
theme_set(theme_minimal())
data <- readRDS(file = "Daten/data.RDS")
date_data <- readRDS(file = "Daten/date_data.RDS")
min_data <- readRDS(file = "Daten/min_data.RDS")
date_data_noNA <- date_data[!is.na(date_data$count_people),]
data_noNA <- data[!is.na(data$lvs),]
min_data_noNA <- min_data[!is.na(min_data$count_people_min),]
source("smooth_plots_date_model.R", encoding = "UTF-8")
date_model <- gam(
cbind(lvs_true, lvs_false) ~ s(int_date, bs = "ps", k = 10) +
s(avalanche_report, bs = "ps", k = 5) +
s(int_day, bs = "cp", k = 7) +
s(temperature, bs = "ps", k = 10) +
s(solar_radiation_prop, bs = "ps", k = 10) +
s(snow_diff, bs = "ps", k = 10) +
holiday,
knots = list(
# int_date
c(17870, 17880, 17890, 17900, 17919, 17929, 17939, 17949, 17959, 17969, 17979, 17989, 17999, 18009, 18019),
c(), # avalanche report
c(), # int_day
# temperature
c(-14.7, -11.3, -7.9, -4.5, -2.8, -1.4, 0.2, 1.7, 2.3, 3.6, 5.2, 8.4, 9.7, 10.3, 11.6),
# solar_radiation_prop
c(),
# snow_diff
c(-27, -20, -13, -6, -5, -4, -4, -3, -1, 0, 2, 10, 40, 70, 100)
),
data = date_data,
method = "REML",
family = binomial(link = "logit"))
date_Viz <- getViz(date_model)
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
date_model$summary
summary(date_model)
summary.gam(date_model,
dispersion = date_model$deviance/date_model$df.residual)
gam.check(date_model, type = "deviance")
date_model <- gam(
cbind(lvs_true, lvs_false) ~ s(int_date, bs = "ps", k = 12) +
s(avalanche_report, bs = "ps", k = 5) +
s(int_day, bs = "cp", k = 7) +
s(temperature, bs = "ps", k = 10) +
s(solar_radiation_prop, bs = "ps", k = 10) +
s(snow_diff, bs = "ps", k = 10) +
holiday,
knots = list(
# int_date
c(17876, 17884, 17892, 17900, 17918, 17926, 17934, 17942, 17950, 17958, 17966, 17974, 17982, 17990, 17998, 18006, 18014),
c(), # avalanche report
c(), # int_day
# temperature
c(-14.7, -11.3, -7.9, -4.5, -2.8, -1.4, 0.2, 1.7, 2.3, 3.6, 5.2, 8.4, 9.7, 10.3, 11.6),
# solar_radiation_prop
c(),
# snow_diff
c(-27, -20, -13, -6, -5, -4, -4, -3, -1, 0, 2, 10, 40, 70, 100)
),
data = date_data,
method = "REML",
family = binomial(link = "logit"))
date_Viz <- getViz(date_model)
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
summary.gam(date_model,
dispersion = date_model$deviance/date_model$df.residual)
gam.check(date_model, type = "deviance")
date_model <- gam(
cbind(lvs_true, lvs_false) ~ s(int_date, bs = "ps", k = 14) +
s(avalanche_report, bs = "ps", k = 5) +
s(int_day, bs = "cp", k = 7) +
s(temperature, bs = "ps", k = 10) +
s(solar_radiation_prop, bs = "ps", k = 10) +
s(snow_diff, bs = "ps", k = 10) +
holiday,
knots = list(
# int_date
c(17875, 17882.5, 17890, 17897.5, 17914, 17921.5, 17929, 17936.5, 17944, 17951.5, 17959, 17966.5, 17974, 17981.5, 17989, 17996.5, 18004, 18011.5),
c(), # avalanche report
c(), # int_day
# temperature
c(-14.7, -11.3, -7.9, -4.5, -2.8, -1.4, 0.2, 1.7, 2.3, 3.6, 5.2, 8.4, 9.7, 10.3, 11.6),
# solar_radiation_prop
c(),
# snow_diff
c(-27, -20, -13, -6, -5, -4, -4, -3, -1, 0, 2, 10, 40, 70, 100)
),
data = date_data,
method = "REML",
family = binomial(link = "logit"))
date_Viz <- getViz(date_model)
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
summary.gam(date_model,
dispersion = date_model$deviance/date_model$df.residual)
gam.check(date_model, type = "deviance")
date_model <- gam(
cbind(lvs_true, lvs_false) ~ s(int_date, bs = "ps", k = 15) +
s(avalanche_report, bs = "ps", k = 5) +
s(int_day, bs = "cp", k = 7) +
s(temperature, bs = "ps", k = 10) +
s(solar_radiation_prop, bs = "ps", k = 10) +
s(snow_diff, bs = "ps", k = 10) +
holiday,
knots = list(
# int_date
c(17879, 178886, 17893, 17900, 17917, 17924, 17931, 17938, 17945, 17952, 17959, 17966, 17973, 17980, 17987, 17994, 18001, 18008, 18016),
c(), # avalanche report
c(), # int_day
# temperature
c(-14.7, -11.3, -7.9, -4.5, -2.8, -1.4, 0.2, 1.7, 2.3, 3.6, 5.2, 8.4, 9.7, 10.3, 11.6),
# solar_radiation_prop
c(),
# snow_diff
c(-27, -20, -13, -6, -5, -4, -4, -3, -1, 0, 2, 10, 40, 70, 100)
),
data = date_data,
method = "REML",
family = binomial(link = "logit"))
date_Viz <- getViz(date_model)
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
summary.gam(date_model,
dispersion = date_model$deviance/date_model$df.residual)
gam.check(date_model, type = "deviance")
date_model <- gam(
cbind(lvs_true, lvs_false) ~ s(int_date, bs = "ps", k = 20) +
s(avalanche_report, bs = "ps", k = 5) +
s(int_day, bs = "cp", k = 7) +
s(temperature, bs = "ps", k = 10) +
s(solar_radiation_prop, bs = "ps", k = 10) +
s(snow_diff, bs = "ps", k = 10) +
holiday,
knots = list(
# int_date
c(17880, 17885, 178890, 17895, 17900, 17915, 17920, 17925, 17930, 17935, 17940, 17945, 17950, 17955, 17960, 17965, 17970, 17975, 17980, 17985, 17990, 17995, 1800, 1805),
c(), # avalanche report
c(), # int_day
# temperature
c(-14.7, -11.3, -7.9, -4.5, -2.8, -1.4, 0.2, 1.7, 2.3, 3.6, 5.2, 8.4, 9.7, 10.3, 11.6),
# solar_radiation_prop
c(),
# snow_diff
c(-27, -20, -13, -6, -5, -4, -4, -3, -1, 0, 2, 10, 40, 70, 100)
),
data = date_data,
method = "REML",
family = binomial(link = "logit"))
date_Viz <- getViz(date_model)
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
summary.gam(date_model,
dispersion = date_model$deviance/date_model$df.residual)
gam.check(date_model, type = "deviance")
date_model <- gam(
cbind(lvs_true, lvs_false) ~ s(int_date, bs = "ps", k = 21) +
s(avalanche_report, bs = "ps", k = 5) +
s(int_day, bs = "cp", k = 7) +
s(temperature, bs = "ps", k = 10) +
s(solar_radiation_prop, bs = "ps", k = 10) +
s(snow_diff, bs = "ps", k = 10) +
holiday,
knots = list(
# int_date
c(17880, 17885, 17890, 17895, 17900, 17914, 17919, 17924, 17929, 17934, 17939, 17944, 17949, 17954, 17959, 17964, 17969, 17974, 17979, 17984, 17989, 17994, 17999, 18004, 18009),
c(), # avalanche report
c(), # int_day
# temperature
c(-14.7, -11.3, -7.9, -4.5, -2.8, -1.4, 0.2, 1.7, 2.3, 3.6, 5.2, 8.4, 9.7, 10.3, 11.6),
# solar_radiation_prop
c(),
# snow_diff
c(-27, -20, -13, -6, -5, -4, -4, -3, -1, 0, 2, 10, 40, 70, 100)
),
data = date_data,
method = "REML",
family = binomial(link = "logit"))
date_Viz <- getViz(date_model)
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
summary.gam(date_model,
dispersion = date_model$deviance/date_model$df.residual)
gam.check(date_model, type = "deviance")
date_model <- gam(
cbind(lvs_true, lvs_false) ~ s(int_date, bs = "ps", k = 14) +
s(avalanche_report, bs = "ps", k = 5) +
s(int_day, bs = "cp", k = 7) +
s(temperature, bs = "ps", k = 10) +
s(solar_radiation_prop, bs = "ps", k = 10) +
s(snow_diff, bs = "ps", k = 10) +
holiday,
knots = list(
# int_date
c(17875, 17882.5, 17890, 17897.5, 17914, 17921.5, 17929, 17936.5, 17944, 17951.5, 17959, 17966.5, 17974, 17981.5, 17989, 17996.5, 18004, 18011.5),
c(), # avalanche report
c(), # int_day
# temperature
c(-14.7, -11.3, -7.9, -4.5, -2.8, -1.4, 0.2, 1.7, 2.3, 3.6, 5.2, 8.4, 9.7, 10.3, 11.6),
# solar_radiation_prop
c(),
# snow_diff
c(-27, -20, -13, -6, -5, -4, -4, -3, -1, 0, 2, 10, 40, 70, 100)
),
data = date_data,
method = "REML",
family = binomial(link = "logit"))
date_Viz <- getViz(date_model)
date_model_list <- list(
model = date_model,
summary = summary.gam(date_model,
dispersion = date_model$deviance/date_model$df.residual),
# use plogis() to convert to a probability
Viz = date_Viz
)
summary.gam(date_model,
dispersion = date_model$deviance/date_model$df.residual)
plogis(day_model$summary#$p.coeff) # parametrische Eff
)
plogis(date_model$summary$p.coeff)
plogis(-0.02)
plopis(0)
plogis(0)
?plogis
101/15
cat(quantile(date_data_noNA$int_date, seq(0,1, 0.067)), sep=", ")
length(cat(quantile(date_data_noNA$int_date, seq(0,1, 0.067)), sep=", "))
cat(quantile(date_data_noNA$int_date, seq(0,1, 0.07)), sep=", ")
17890-14
17890-7
library("tidyverse")
library("patchwork")
library("GGally")
library("mgcv")
library("mgcViz")
library("lubridate")
library("gridExtra")
library("ggformula")
library("gtools")
theme_set(theme_minimal())
data <- readRDS(file = "Daten/data.RDS")
date_data <- readRDS(file = "Daten/date_data.RDS")
min_data <- readRDS(file = "Daten/min_data.RDS")
date_data_noNA <- date_data[!is.na(date_data$count_people),]
data_noNA <- data[!is.na(data$lvs),]
min_data_noNA <- min_data[!is.na(min_data$count_people_min),]
source("date_model.R", encoding = "UTF-8")
source("day_model.R", encoding = "UTF-8")
source("smooth_plots_date_model.R", encoding = "UTF-8")
source("smooth_plots_day_model.R", encoding = "UTF-8")
date_model <- date_model_function(date_data)
date_model$summary # Übersicht (mit Signifikanz)
plogis(date_model$summary$p.coeff) # parametrische Effekte
date_model_plots <- plots_date_model(date_model)
grid <-
gridPrint(grobs = date_model_plots$grid,
top = "Smooth-Plots im Date-Model",
ncol = 3)
day_model <- day_model_function(min_data_noNA)
day_model$summary # Übersicht (mit Signifikanz)
plogis(day_model$summary$p.coeff) # parametrische Effekt
day_model_plots <- plots_day_model(day_model)
grid <-
gridPrint(grobs = day_model_plots$grid,
top = "Smooth-Plots im Day-Model",
ncol = 3)
day_model_plots$date_time
gam.check(day_model$model, type = "deviance")
concurvity(day_model$model, full = TRUE)
acf(day_model$model$residuals
)
logit_-1 <- function(x) exp(x)/(1+exp(x))
logit_inv <- function(x) exp(x)/(1+exp(x))
logit_inv(day_model$summary$p.coeff[1])
logit_inv(day_model$summary$p.coeff[2])
date_model <- date_model_function(date_data)
date_model$summary # Übersicht (mit Signifikanz)
plogis(date_model$summary$p.coeff) # parametrische Effekte
logit_inv(day_model$summary$p.coeff[21])
logit_inv(day_model$summary$p.coeff[1])
logit_inv(date_model$summary$p.coeff[1])
logit_inv(date_model$summary$p.coeff[2])
?plogis
intercept <- plogis(date_model$summary$p.coeff[1])
plogis(date_model$summary$p.coeff[2], location = intercept) # parametrische Effekte
intercept
plogis(date_model$summary$p.coeff[2], scale = intercept) # parametrische Effekte
plogis(date_model$summary$p.coeff, location = intercept) # parametrische Effekte
plogis(date_model$summary$p.coeff, scale = intercept) # parametrische Effekte
plogis(date_model$summary$p.coeff, log.p = TRUE) # parametrische Effekte
plogis(date_model$summary$p.coeff, lower.tail = FALSE) # parametrische Effekte
date_model$summary # Übersicht (mit Signifikanz)
plogis(date_model$summary$p.coeff) # parametrische Effekte
exp(date_model$summary$p.coeff[1]+date_model$summary$p.coeff[2])/(1+exp(date_model$summary$p.coeff[1]+date_model$summary$p.coeff[2]))
plot(sm(date_Viz, select = 1), trans = exp()/(1+exp())) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
library("gtools")
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
date_Viz <- date_model$Viz
date_model_date <-
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
library("tidyverse")
library("patchwork")
library("GGally")
library("mgcv")
library("mgcViz")
library("lubridate")
library("gridExtra")
library("ggformula")
library("gtools")
theme_set(theme_minimal())
data <- readRDS(file = "Daten/data.RDS")
date_data <- readRDS(file = "Daten/date_data.RDS")
min_data <- readRDS(file = "Daten/min_data.RDS")
date_data_noNA <- date_data[!is.na(date_data$count_people),]
data_noNA <- data[!is.na(data$lvs),]
min_data_noNA <- min_data[!is.na(min_data$count_people_min),]
plot(sm(date_Viz, select = 1), trans = exp()/(1+exp())) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
trans_function <- function(x) exp(x)/(1+exp(x))
plot(sm(date_Viz, select = 1), trans = trans_function) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
ggplot(date_model, aes(y = date_model$model$smooth[1])) + geom_line(aes(x = int_date))
ggplot(date_model$model, aes(y = date_model$model$smooth[1])) + geom_line(aes(x = int_date))
ggplot(date_model$model$, aes(y = smooth[1])) + geom_line(aes(x = int_date))
ggplot(date_model$model, aes(y = smooth[1])) + geom_line(aes(x = int_date))
date_model$model$smooth[1]
ggplot(date_model$model, aes(y = smooth[1]$S)) + geom_line(aes(x = int_date))
ggplot(date_model$model, aes(y = smooth[1]$S[[1]])) + geom_line(aes(x = int_date))
ggplot(date_model$model, aes(y = smooth[[1]]$S[[1]])) + geom_line(aes(x = int_date))
plot(sm(date_Viz, select = 1), trans = qlogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
?plogis
plogis
C_plogis
stats:::C_plogis
trans_function <- function(x) exp(intercept+x)/(1+exp(intercept+x))
intercept
intercept <- date_model$model$coefficients[1]
trans_function <- function(x) exp(intercept+x)/(1+exp(intercept+x))
intercept
plot(sm(date_Viz, select = 1), trans = trans_function()) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
date_Viz$smooth[1]$S
date_Viz$smooth[1]
date_Viz$coefficients
date_Viz$fitted.values
date_Viz$smooth
date_Viz$smooth[1]
date_Viz$smooth[1]$qr
date_Viz$smooth[[1]]$qr
date_Viz$smooth[[1]]
date_Viz$smooth[1]["qr"]
date_Viz$smooth[1]["pspline.smooth"]
View(date_Viz$smooth[1])
View(date_Viz$smooth[1][[1]])
plot(date_model$model, pages = 1, trans = plogis,
shift = coef(date_model$model)[1],
seWithMean = TRUE)
plot(date_model$model, pages = 1, trans = plogis,
shift = coef(date_model$model)[1])
plot(date_model$model, pages = 1, trans = plogis)
coef(date_Viz)
plot(sm(date_Viz, select = 1), trans = plogis, shift = coef(date_Viz)[1]) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
plot(sm(date_Viz, select = 1), trans = plogis) +
l_ciPoly() + # Konfidenzband
l_ciLine(colour = "grey", linetype = 1) + # Konfidenzivränder
l_fitLine(color = "black", size = 1.2) + # Fitline
l_rug(mapping = aes(x=x), alpha = 0.8,
length = unit(0.02, "npc")) + # Verdichtung an Achsen
scale_y_continuous(limits = c(0,1))
?gam.plot
?plot.gam
plot(date_model$model, pages = 1, trans = plogis,
shift = coef(date_model$model)[1],
seWithMean = TRUE)
plogis(coef(date_model$model)[1]+coef(date_model$model)[2] )
plogis(coef(date_model$model)[1] )
